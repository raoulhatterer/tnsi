# Arbres

<img src="data/banniere.png" width='70%' />

<img src="data/prog.png" width='70%' />
<img src="data/prog2.png" width='70%' />

## 1. Terminologie

### 1.1 Vocabulaire
Un arbre est une structure hi√©rarchique de donn√©es, compos√©e de n≈ìuds. Si on adopte le vocabulaire des graphes (qui seront vus plus tard dans l'ann√©e), un arbre est un graphe non orient√©, connexe, sans cycle, et dans lequel un n≈ìud joue le r√¥le de racine.

![](data/term.png) 


- Chaque **n≈ìud** a exactement un seul **n≈ìud p√®re**, √† l'exception du n≈ìud **racine** qui est le seul n≈ìud √† ne pas avoir de p√®re. (oui, **la** racine d'une arbre est **en haut**)
<img src="data/real_tree.png" width='30%' />
- Chaque n≈ìud peut avoir un nombre quelconque de **fils**, dont il est le p√®re.
- Les n≈ìuds qui n'ont pas de fils sont appel√©s les **feuilles** (ou n≈ìuds externes).
- Les n≈ìuds qui ne sont pas des feuilles sont des **n≈ìuds internes**.
- Le nom de chaque n≈ìud est appel√© son **√©tiquette**.

**Exemples :**
dans l'arbre ci-dessus,
- C est la racine, E, Z A et G sont les feuilles.
- K est le p√®re de A et G.
- F est le p√®re de Z.
- C est le p√®re de B et K
- B est le p√®re de E et F.

### 1.2 Exemples d'arbres

#### 1.2.1 La famille royale britannique
<img src="data/windsor.png" width='60%' />

Redessinez de mani√®re plus sch√©matique cet arbre. Pour quelle raison cet arbre a-t-il √©t√© modifi√© par rapport √† sa version orginale (voir [ici](https://i.pinimg.com/originals/e8/d1/c7/e8d1c7b2834ce2c368848cf7fc91a057.jpg ) ), qui laissait appara√Ætre les parents de chaque enfant ?

#### 1.2.2 Le DOM d'une page web
DOM : Document Object Model
<img src="data/dom.svg" width='40%' />

#### 1.2.3 L'arborescence d'un disque dur
Les syst√®mes Unix (MacOS ou GNU/Linux) organisent leur disque dur suivant l'arborescence ci-dessous :
<img src="data/arbo-unix.gif" width='40%' />

#### 1.2.4 Exercice
Quelque part √† l'int√©rieur des dossiers contenus dans l'archive [dossiers.zip](data/dossiers.zip) se trouve un fichier ```tresor.txt```. Quel secret renferme-t-il ?

Attention, cette recherche est √† faire uniquement en ligne de commande :
- ```ls``` : pour lister les dossiers et fichiers d'un r√©pertoire
- ```cd Dossier``` : pour se rendre dans le rep√©rtoire ```Dossier```
- ```cd ..``` : pour remonter d'un niveau dans l'arborescence
- ```unzip monarchive.zip``` : pour d√©compresser une archive
- ```tree``` : pour afficher l'arborescence du r√©pertoire courant
- ```sudo apt install monprog``` : pour installer le programme ```monprog``` si celui-ci est manquant.

### 1.3 Caract√©ristiques d'un arbre

#### 1.3.1 Outils num√©riques de description

![](data/carac.png)



- la **taille** d'un arbre est son nombre total de n≈ìuds. Ici, elle vaut 8.


- l'**arit√©** d'un n≈ìud est son nombre de fils. Ici, l'arit√© de B vaut 2, celle de F vaut 1, celle de Z vaut 0.


- la **profondeur** d'un n≈ìud est le nombre de n≈ìuds de son chemin le plus court vers la racine. 
Ici, la profondeur de G est 3 (G-K-C), la profondeur de B est 2 (B-C), la profondeur de Z est 4 (Z-F-B-C), la profondeur de C est 1.


- la **hauteur** d'un arbre est la profondeur de son n≈ìud le plus profond. 
Ici, la hauteur de l'arbre est 4.
Nous prendrons comme **convention** que :
- si un arbre est r√©duit √† **un seul n≈ìud-racine**, sa hauteur sera **1**.
- si un arbre est **vide**, sa hauteur est **0**.

*Cette convention est celle adopt√©e dans le sujet 0 publi√© le 15/12/2020. Attention, dans certains ouvrages, l'arbre vide a pour hauteur -1, et donc l'arbre r√©duit √† un seul n≈ìud a pour hauteur 0, donc notre arbre a une hauteur 3.*

### 1.4 Encore du vocabulaire

#### 1.4.2 Arbres binaires
Un arbre binaire est un arbre dont chaque n≈ìud poss√®de **au plus** deux fils.

L'arbre g√©n√©alogique de la famille royale britannique n'est pas un arbre binaire. 

L'arbre ci-dessous est lui un arbre binaire.

![](data/carac3.png)

#### 1.4.1 Sous-arbres  d'un arbre binaire

Chaque n≈ìud d'un arbre binaire ne pouvant pas avoir plus de 2 fils, il est possible de s√©parer le ¬´dessous¬ª de chaque n≈ìud en deux sous-arbres (√©ventuellement vides) : le **sous-arbre gauche** et le **sous-arbre droit**.

![](data/sousarbres.png)


- Les deux sous-arbres repr√©sent√©s ici sont les sous-arbres du n≈ìud-racine T. 
- Le n≈ìud O admet comme sous-arbre gauche le n≈ìud H et comme sous-arbre droit le n≈ìud N.
- Les feuilles P, H et N ont pour sous-arbre gauche et pour sous-arbre droit l'**arbre vide**.



#### 1.4.3 Cas des arbres binaires complets

On rencontre tr√®s souvent des arbres binaires dits **complets** parce qu'aucun des fils gauche ou droit n'est manquant.

![](data/complet.png)


**Taille d'un arbre complet de hauteur $h$ :**
$$1 + 2 + 2^2 + 2^3 + \dots + 2^{h-1} = 2^{h} - 1$$

*preuve* : ceci est la somme $S$ des $h$ premiers termes d'une suite g√©om√©trique de raison 2 et de premier terme 1, d'o√π $S= \frac{1-2^{h}}{1-2} = 2^{h} -1$.


Un arbre complet de hauteur $h$ (en prenant la convention que l'arbre vide a pour hauteur 0) a donc une taille √©gale √† $2^{h}-1$.

**Remarque :** On en d√©duit une in√©galit√© classique sur l'encadrement de la taille $t$ d'un arbre binaire (non n√©cessairement complet) de hauteur $h$ :
$$ h \leqslant t \leqslant 2^{h}-1$$

## 2. Parcours d'arbres
Les arbres √©tant une structure hi√©rarchique, leur utilisation implique la n√©cessit√© d'un **parcours** des valeurs stock√©es. Par exemple pour toutes les r√©cup√©rer dans un certain ordre, ou bien pour en chercher une en particulier.  

Il existe plusieurs mani√®res de parcourir un arbre.


### 2.1 Parcours en largeur d'abord (BFS)
*BFS : Breadth First Search*

Le parcours en largeur d'abord est un parcours √©tage par √©tage (de haut en bas) et de gauche √† droite.

![](data/BFS.png)

L'ordre des lettres parcourues est donc T-Y-O-P-H-N.

Les trois parcours que nous allons voir maintenant sont des parcours en **profondeur d'abord**, ou **DPS** (*Depth First Search*). Ce qui signifie qu'un des deux sous-arbres sera totalement parcouru avant que l'exploration du deuxi√®me ne commence. 

### 2.2 Parcours pr√©fixe
Le parcours **pr√©fixe** est un parcours **en profondeur d'abord**. 

**M√©thode du parcours pr√©fixe :** (parfois aussi appel√© *pr√©ordre*)
- Chaque n≈ìud est visit√© avant que ses fils le soient.
- On part de la racine, puis on visite son fils gauche (et √©ventuellement le fils gauche de celui-ci, etc.) avant de remonter et de redescendre vers le fils droit.

![](data/prefixe.png)

L'ordre des lettres parcourues est donc T-Y-P-O-H-N.

### 2.3 Parcours infixe
Le parcours **infixe** est aussi un parcours en profondeur d'abord.

**M√©thode du parcours infixe :** (parfois aussi appel√© *en ordre*)
- Chaque n≈ìud est visit√© **apr√®s son fils gauche mais avant son fils droit**.
- On part donc de la feuille la plus √† gauche et on remonte par vagues sucessives. Un n≈ìud ne peut pas √™tre visit√© si son fils gauche ne l'a pas √©t√©.

![](data/infixe.png)

L'ordre des lettres parcourues est donc P-Y-T-H-O-N.

### 2.4 Parcours postfixe
Le parcours **postfixe** est aussi un parcours en profondeur d'abord.

**M√©thode du parcours postfixe :** (parfois aussi appel√© *post ordre*)
- Chaque n≈ìud est visit√© **apr√®s ses fils le soient**.
- On part donc de la feuille la plus √† gauche, et on ne remonte √† un n≈ìud p√®re que si ses fils ont tous √©t√© visit√©s. 

![](data/postfixe.png)

L'ordre des lettres parcourues est donc P-Y-H-N-O-T.

### 2.5 Comment ne pas se m√©langer entre le pr√© / in / post fixe ?
- *pr√©* veut dire *avant*
- *in* veut dire *au milieu*
- *post* veut dire *apr√®s*

Ces trois mots-cl√©s parlent de la place du **p√®re** par rapport √† ses fils. 
Ensuite, il faut toujours se souvenir qu'on traite le fils gauche avant le fils droit.

- pr√©fixe : le p√®re doit √™tre le premier par rapport √† ses fils.
- infixe : le p√®re doit √™tre entre son fils gauche (trait√© en premier) et son fils droit.
- postfixe : le p√®re ne doit √™tre trait√© que quand ses deux fils (gauche d'abord, droite ensuite) l'ont √©t√©.

Un parcours pr√©fixe commencera toujours par la racine, alors qu'un parcours postfixe finira toujours par la racine. Dans un parcours infixe, la racine sera ¬´au milieu¬ª (pas n√©cessairement parfaitement).

### 2.6 Exercice 1

![](data/exo_parcours.png)

Donner le rendu de chaque parcours :
1. Parcours en largeur 
2. Parcours pr√©fixe
3. Parcours infixe
4. Parcours postfixe

[Correction](https://gist.github.com/glassus/031901b09dbb9d780247beb5db69eda2)


### 2.7 Exercice 2

![](data/exo_2.png)

Donner le rendu de chaque parcours :
1. Parcours en largeur 
2. Parcours pr√©fixe
3. Parcours infixe
4. Parcours postfixe

[Correction](https://gist.github.com/glassus/05aeb20012b01bbaa170aa78c6959a0e)


## 3. Impl√©mentations d'un arbre binaire
### 3.1 En utilisant la Programmation Orient√©e Objet
Le but est d'obtenir l'interface ci-dessous.

Il est √† remarquer que ce que nous allons appeler ¬´Arbre¬ª est en fait un n≈ìud et ses deux fils gauche et droit.


```python
a = Arbre(4) # pour cr√©er l'arbre dont le n≈ìud a pour valeur 4,
             # et dont les sous-arbres gauche et droit sont None
```


```python
a.set_left(Arbre(3)) # pour donner la valeur 3 au n≈ìud du sous-arbre gauche de a
```


```python
a.set_right(Arbre(1)) # pour donner la valeur 1 au n≈ìud du sous-arbre droit de a
```


```python
a.get_right() # pour acc√©der au sous-arbre droit de a
```


```python
a.get_left() # pour acc√©der au sous-arbre gauche de a
```


```python
a.get_data() # pour acc√©der √† la valeur du n≈ìud de l'arbre a
```

**Exercice :** Dessinez l'arbre cr√©√© par les instructions suivantes :


```python
a = Arbre(4)
a.set_left(Arbre(3))
a.set_right(Arbre(1))
a.get_right().set_left(Arbre(2))
a.get_right().set_right(Arbre(7))
a.get_left().set_left(Arbre(6))
a.get_right().get_right().set_left(Arbre(9))
```

[correction](data/exo_imp.png)

**üüä Impl√©mentation üüä**

‚Øà **Principe** : nous allons cr√©er une classe ```Arbre```, qui contiendra 3 attributs : 
- ```data``` : la valeur du n≈ìud (de type ```Int```)
- ```left``` : le sous-arbre gauche (de type ```Arbre```)
- ```right``` : le sous-arbre droit (de type ```Arbre```).

Par d√©faut, les attributs ```left ``` et ```right``` seront √† ```None```, qui repr√©sentera l'arbre vide (ce qui n'est pas tr√®s rigoureux, car ```None``` n'est pas de type ```Arbre```...).

‚Øà **Parti-pris** : afin de respecter le paradigme de la Programmation Orient√©e Objet, nous allons (pour une fois) jouer totalement le jeu de l'**encapsulation** en nous refusant d'acc√©der directement aux attributs.

Nous allons donc construire des m√©thodes permettant d'acc√©der √† ces attributs (avec des **getters**, ou **accesseurs** en fran√ßais) ou de les modifier (avec des **setters**, ou **mutateurs** en fran√ßais) .

Dans certains langage (Java, C#...) , l'encapsulation est vivement encourag√©e : il est possible de limiter concr√®tement la visibilit√© des attributs (par les mots-cl√©s ```private``` ou ```protected```).



```python
class Arbre:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

    def set_left(self, sousarbre):
        self.left = sousarbre

    def set_right(self, sousarbre):
        self.right = sousarbre  

    def get_left(self):
        return self.left

    def get_right(self):
        return self.right

    def get_data(self):
        return self.data
```

L'impl√©mentation pr√©c√©dente permet d'utiliser les instructions de l'exercice pr√©c√©dent et de v√©rifier que l'arbre a bien √©t√© cr√©√©.


```python
a = Arbre(4)
a.set_left(Arbre(3))
a.set_right(Arbre(1))
a.get_right().set_left(Arbre(2))
a.get_right().set_right(Arbre(7))
a.get_left().set_left(Arbre(6))
a.get_right().get_right().set_left(Arbre(9))
```


```python
a
```




    <__main__.Arbre at 0x7f0100361f40>




```python
a.get_right().get_left().get_data()
```




    2



### 3.2 Impl√©mentation √† partir de tuples imbriqu√©s

Consid√©rons qu'un arbre peut se repr√©senter par le tuple ```(valeur, sous-arbre gauche, sous-arbre droit)```.

L'arbre ci-dessous :
![](data/imp_tuple.png)
peut alors √™tre repr√©sent√© par le tuple :


```python
a = (2, (8, (6,(),()), (9,(),())), (1, (7, (),()), ()))
```

Le sous-arbre gauche est alors ```a[1]``` et le sous-arbre droit est ```a[2]```.


```python
a[1]
```




    (8, (6, (), ()), (9, (), ()))




```python
a[2]
```




    (1, (7, (), ()), ())



**Exercice :** √©crire le tuple repr√©sentant l'arbre ci-dessous.

![](data/carac3.png)

[correction](https://gist.github.com/glassus/4056ad7c0a0409126ccce517c6afeb4f)


```python

```

### 3.3 Impl√©mentation √† partir d'une ¬´simple¬ª liste
De mani√®re plus surprenante, il existe une m√©thode pour impl√©menter un arbre binaire (qui est une structure hi√©rarchique) avec une liste (qui est une structure lin√©aire). 
Ceci peut se faire par le biais d'une astuce sur les indices :

**Les fils du n≈ìud d'indice i sont plac√©s aux indice 2i+1 et 2i+2**.

Cette m√©thode est connue sous le nom de ¬´m√©thode d'Eytzinger¬ª, et utilis√©e notamment en [g√©n√©alogie](https://fr.wikipedia.org/wiki/Num%C3%A9rotation_de_Sosa-Stradonitz) pour num√©roter facilement les individus d'un arbre g√©n√©alogique.



**Exemple :**

![](data/eytzinger.png)


Pour comprendre facilement la num√©rotation, il suffit de s'imaginer l'arbre complet (en rajoutant les fils vides) et de faire une num√©rotation en largeur, niveau par niveau :

![](data/eytzinger2.png)

**Exercice :** Si on note Œî le sous-arbre vide, dessiner l'arbre repr√©sent√© par la liste :


```python
a = [3,4,Œî,7,5,Œî,Œî]
```

[correction](data/corrtuple.png)

**Remarque :** parfois (comme dans le sujet 0...) la racine de l'arbre est plac√©e √† l'indice 1. Dans ce cas, les fils du n≈ìud d'indice i sont plac√©s aux indice 2i et 2i+1.

## 4. Utilisation de l'impl√©mentation : parcours, taille...

Dans toute la suite, sauf mention contraire, on utilisera l'impl√©mentation en Programmation Orient√©e Objet.
Nous allons cr√©er des fonctions renvoyant les diff√©rents parcours d'un arbre, ou encore sa taille, sa hauteur, son nombre de feuilles... Toutes ses fonctions exploiteront la structure **r√©cursive** d'un arbre.


**Rappel de l'impl√©mentation :**


```python
class Arbre:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

    def set_left(self, sousarbre):
        self.left = sousarbre

    def set_right(self, sousarbre):
        self.right = sousarbre  

    def get_left(self):
        return self.left

    def get_right(self):
        return self.right

    def get_data(self):
        return self.data
```

### 4.1 Parcours pr√©fixe, infixe, postfixe

#### 4.1.1 Parcours pr√©fixe


```python
def prefixe(arbre):
    if arbre is None :
        return 0
    print(arbre.data, end = '-')
    prefixe(arbre.left)
    prefixe(arbre.right)

```

Exemple avec l'arbre 
![](data/exo_2.png)


```python
a = Arbre(9)
a.set_left(Arbre(8))
a.set_right(Arbre(7))
a.get_left().set_left(Arbre(6))
a.get_left().set_right(Arbre(2))
a.get_right().set_right(Arbre(5))
a.get_left().get_right().set_left(Arbre(1))
a.get_right().get_right().set_left(Arbre(4))
a.get_right().get_right().set_right(Arbre(3))
```


```python
prefixe(a)
```

    9-8-6-2-1-7-5-4-3-

#### 4.1.2 Parcours infixe


```python
def infixe(arbre):
    if arbre is None :
        return 0
    infixe(arbre.left)
    print(arbre.data, end = '-')
    infixe(arbre.right)
```


```python
infixe(a)
```

    6-8-1-2-9-7-4-5-3-

#### 4.1.3 Parcours postfixe


```python
def postfixe(arbre):
    if arbre is None :
        return 0
    postfixe(arbre.left)
    postfixe(arbre.right)
    print(arbre.data, end = '-')
```


```python
postfixe(a)
```

    6-1-2-8-4-3-5-7-9-

### 4.2 Calcul de la taille d'un arbre
Rappel :la taille d'un arbre est le nombre de ses n≈ìuds.


```python
def taille(arbre):
    if arbre is None:
        return 0
    else:
        return 1 + taille(arbre.get_left()) + taille(arbre.get_right())
```


```python
taille(a)
```




    9



### 4.3 Calcul de la hauteur d'un arbre
Rappel : on prendra comme convention que l'arbre vide a pour hauteur 0.


```python
def hauteur(arbre):
    if arbre is None:
        return 0
    else :
        return 1 + max(hauteur(arbre.get_left()),hauteur(arbre.get_right()))
```


```python
hauteur(a)
```




    4



### 4.4 Calcul du nombre de feuilles d'un arbre
Rappel : une feuille est un n≈ìud d'arit√© 0, autrement dit sans fils gauche ni fils droit.


```python
def nbfeuilles(arbre):
    if arbre is None:
        return 0
    if (arbre.get_left() is None) and (arbre.get_right() is None):
        return 1
    else :
        return nbfeuilles(arbre.get_left()) +  nbfeuilles(arbre.get_right())
```


```python
nbfeuilles(a)
```




    4



### 4.5 Rechercher une valeur dans un arbre
On renverra ```True``` ou ```False``` en fonction de la pr√©sence ou non de la valeur dans l'arbre.


```python
def recherche(arbre, valeur):
    if arbre is None:
        return False
    if arbre.get_data() ==  valeur:
        return True
    else :
        return recherche(arbre.get_left(), valeur) or recherche(arbre.get_right(), valeur)
```


```python
recherche(a, 2)
```




    True




```python
recherche(a, 45)
```




    False



### 4.6 Parcours en largeur
Le parcours en largeur (BFS) est le plus simple √† faire visuellement : mais il est plus difficile √† coder que les parcours pr√©fixe, infixe, postfixe.  
Il est n√©cessaire d'utiliser une **file**  :
- On place l'arbre dans la file.
- Tant que la file n'est pas vide, on proc√®de comme suit :
    - On d√©file, donc on r√©cup√®re l'arbre situ√© en haut de la file.  
    - Si cet arbre n'est pas vide :
        - On garde son √©tiquette.
        - On enfile son sous-arbre gauche, puis son sous-arbre droit.

![](data/parcoursBFS.png)

On importera l'objet ```Queue()``` du module ```queue``` de Python, qui permet de  :
- cr√©er une file vide avec ```file = Queue()```
- d√©filer un √©l√©ment par ```file.get()```
- enfiler l'√©l√©ment ```a``` par ```file.put(a)```
- savoir si la file est vide par le bool√©en ```file.empty()```


```python
# arbre-test
# ne pas oublier de remonter plus haut dans le document pour relancer la classe Arbre
a = Arbre(8)
a.set_left(Arbre(4))
a.set_right(Arbre(5))
a.get_left().set_left(Arbre(2))
a.get_left().set_right(Arbre(1))
a.get_right().set_right(Arbre(3))
```


```python
from queue import Queue

def BFS(arbre):        
    file = Queue()
    file.put(arbre)
    sol = []
    while file.empty() is False :
        a = file.get()
        if a is not None :
            sol.append(a.get_data())
            file.put(a.get_left())
            file.put(a.get_right())
    return sol
```


```python
BFS(a)
```




    [8, 4, 5, 2, 1, 3]



## 5. Arbres binaires de recherche (ABR)
Un **arbre binaire de recherche** est un arbre binaire dont les valeurs des n≈ìuds (valeurs qu'on appelle √©tiquettes, ou cl√©s) v√©rifient la propri√©t√© suivante :
- l'√©tiquette d'un n≈ìud est **sup√©rieure ou √©gale** √† celle de **chaque** n≈ìud de son **sous-arbre gauche**.
- l'√©tiquette d'un n≈ìud est **strictement inf√©rieure** √† celle du **chaque** n≈ìud de son **sous-arbre droit**.

![](data/exABR.png)

√Ä noter que l'arbre 3 (qui est bien un ABR) est appel√© **arbre filiforme**. 

L'arbre 5 n'est pas un ABR √† cause de la feuille 9, qui fait partie du sous-arbre gauche de 3 sans lui √™tre inf√©rieure.

**Remarque :** on pourrait aussi d√©finir un ABR comme un arbre dont le parcours infixe est une suite croissante.

### 5.1 D√©terminer si un arbre est un ABR

Employer une m√©thode r√©cursive imposerait de garder en m√©moire dans l'exploration des sous-arbres la valeur maximale ou minimale. Nous allons plut√¥t utiliser la remarque pr√©c√©dente, et nous servir du parcours infixe.

M√©thode : r√©cup√©rer le parcours infixe dans une liste, et faire un test sur cette liste.


```python
def est_ABR(arbre, p):
    '''renvoie un bool√©en indiquant si arbre est un ABR'''
    # p est la liste qui contiendra le parcours. la fonction est √† appeler par est_ABR(a, [])
    if arbre is None :
        return 0
    est_ABR(arbre.left, p)
    p.append(arbre.data)
    est_ABR(arbre.right, p)
    return p == sorted(p) # on regarde si le parcours est √©gal au parcours tri√© (merci TomFox)

```


```python
# arbres-tests 

#arbre n¬∞4
a = Arbre(5)
a.set_left(Arbre(2))
a.set_right(Arbre(7))
a.get_left().set_left(Arbre(0))
a.get_left().set_right(Arbre(3))
a.get_right().set_left(Arbre(6))
a.get_right().set_right(Arbre(8))

#arbre n¬∞5
b = Arbre(3)
b.set_left(Arbre(2))
b.set_right(Arbre(5))
b.get_left().set_left(Arbre(1))
b.get_left().set_right(Arbre(9))
b.get_right().set_left(Arbre(4))
b.get_right().set_right(Arbre(6))


```


```python
est_ABR(a, [])
```




    True




```python
est_ABR(b, [])
```




    False



### 5.2 Rechercher une cl√© dans un ABR

Un arbre binaire de taille $n$ contient $n$ cl√©s (pas forc√©ment diff√©rentes). Pour savoir si une valeur particuli√®re fait partie des cl√©s, on peut parcourir tous les n≈ìuds de l'arbre, jusqu'√† trouver (ou pas) cette valeur dans l'arbre. Dans le pire des cas, il faut donc faire $n$ comparaisons.

Mais si l'arbre est un ABR, le fait que les valeurs soient ¬´rang√©es¬ª va consid√©rablement am√©liorer la vitesse de recherche de cette cl√©, puisque la moiti√© de l'arbre restant sera √©cart√©e apr√®s chaque comparaison.


```python
def contient_valeur(arbre, valeur):
    if arbre is None :
        return False
    if arbre.get_data() == valeur :
        return True
    if valeur < arbre.get_data() :
        return contient_valeur(arbre.get_left(), valeur)
    else:
        return contient_valeur(arbre.get_right(), valeur)

```

**Exemple** 

L'arbre ```a``` contient la valeur 8, mais l'arbre ```b``` ne la contient pas :



```python
contient_valeur(a,8)
```




    True




```python
contient_valeur(b,8)
```




    False



### 5.3  Co√ªt de la recherche dans un ABR √©quilibr√©
![](data/rechercheABR.png)

Imaginons un arbre √©quilibr√© de taille $n$. Combien d'√©tapes faudra-t-il, dans le pire des cas, pour trouver (ou pas) une cl√© particuli√®re dans cet arbre ?

Apr√®s chaque n≈ìud, le nombre de n≈ìuds restant √† explorer est divis√© par 2. On retrouve l√† le principe de recherche dichotomique, vu en classe de Premi√®re (voir [ici](https://github.com/glassus/nsi/blob/master/Premiere/Theme05_Algorithmique/05_Dichotomie.ipynb)).

S'il faut parcourir tous les √©tages de l'arbre avant de trouver (ou pas) la cl√© recherch√©e, le nombre de n≈ìuds parcourus est donc √©gal √† la hauteur $h$ de l'arbre.

Pour un arbre complet, cette hauteur v√©rifie la relation $2^h -1= n$. et donc $2^h = n+1$.

$h$ est donc le ¬´nombre de puissance de 2¬ª que l'on peut mettre dans $n+1$. Cette notion s'appelle le logarithme de base 2 et se note $\log_2$.

Par exemple, $\log_2(64)=6$ car $2^6=64$.

Le nombre maximal de n≈ìuds √† parcourir pour rechercher une cl√© dans un ABR √©quilibr√© de taille $n$ est donc de l'ordre de $\log_2(n)$, ce qui est tr√®s performant !

Pour arbre contenant 1000 valeurs, 10 √©tapes suffisent.

Cette **complexit√© logarithmique** est un atout essentiel de la structure d'arbre binaire de recherche.

### 5.4  Insertion dans un ABR
L'insertion d'une cl√© va se faire au niveau d'une feuille, donc au bas de l'arbre. Dans la version r√©cursive de l'algorithme d'insertion, que nous allons impl√©menter, il n'est pourtant pas n√©cessaire de descendre manuellement dans l'arbre jusqu'au bon endroit : il suffit de distinguer dans lequel des deux sous-arbres gauche et droit doit se trouver la future cl√©, et d'appeler r√©cursivement la fonction d'insertion dans le sous-arbre en question.

**Algorithme :**
- Si l'arbre est vide, on renvoie un nouvel objet Arbre contenant la cl√©.
- Sinon, on compare la cl√© √† la valeur du n≈ìud sur lequel on est positionn√© :
    - Si la cl√© est inf√©rieure √† cette valeur, on va modifier le sous-arbre gauche en le faisant pointer vers ce m√™me sous-arbre une fois que la cl√© y aura √©t√© inject√©, par un appel r√©cursif.
    - Si la cl√© est sup√©rieure, on fait la m√™me chose avec l'arbre de droite.
    - on renvoie le nouvel arbre ainsi cr√©√©.


```python
def insertion(arbre, valeur):
    if arbre is None :
        return Arbre(valeur)
    else :
        v = arbre.get_data()
        if valeur <= v :
            arbre.set_left(insertion(arbre.get_left(), valeur))
        else:
            arbre.set_right(insertion(arbre.get_right(), valeur))
        return arbre
```

**Exemple :** Nous allons ins√©rer la valeur 4 dans l'arbre ```a``` et v√©rifier par un parcours infixe (avant et apr√®s l'insertion) que la valeur 4 a bien √©t√© ins√©r√©e au bon endroit.

![](data/insertionABR.png)


```python
a = Arbre(5)
a.set_left(Arbre(2))
a.set_right(Arbre(7))
a.get_left().set_left(Arbre(0))
a.get_left().set_right(Arbre(3))
a.get_right().set_left(Arbre(6))
a.get_right().set_right(Arbre(8))
```


```python
infixe(a)
```

    0-2-3-5-6-7-8-


```python
insertion(a,4)
```




    <__main__.Arbre at 0x7f46f0507e80>




```python
infixe(a)
```

    0-2-3-4-5-6-7-8-

La valeur 4 a donc bien √©t√© ins√©r√©e au bon endroit.



---
## Bibliographie
- Num√©rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, √©ditions ELLIPSES.



---

![](../../../ccbysa.png "image") G.Lassus, Lyc√©e Fran√ßois Mauriac --  Bordeaux  

